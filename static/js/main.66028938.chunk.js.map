{"version":3,"sources":["components/CreateTaskForm.js","components/Task.js","components/TaskList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTaskForm","state","taskText","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","addTaskToList","id","shortId","generate","text","complete","onSubmit","this","placeholder","onChange","onClick","React","Component","style","display","justifyContent","textDecoration","task","fontSize","completeTask","removeTask","TaskList","taskList","filterParam","setAllTasksAsCompleted","newTask","setTaskAsComplete","map","filter","removeAllCompletedTasks","updateFilterParam","filterValue","displayTasks","Task","tasksLeftToComplete","length","completedTasksExit","some","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAGqBA,E,4MACnBC,MAAQ,CACNC,SAAU,I,EAGZC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAItCC,aAAe,SAACL,GAEdA,EAAMM,iBAEN,EAAKC,MAAMC,cAAc,CACvBC,GAAIC,IAAQC,WACZC,KAAM,EAAKf,MAAMC,SACjBe,UAAU,IAIZ,EAAKZ,SAAS,CAAEH,SAAU,M,4CAG5B,WACE,OACE,uBAAMgB,SAAUC,KAAKV,aAArB,UACE,uBACEF,KAAK,WACLa,YAAY,sBACZZ,MAAOW,KAAKlB,MAAMC,SAClBmB,SAAUF,KAAKhB,eAEjB,wBAAQmB,QAASH,KAAKV,aAAtB,6B,GAlCoCc,IAAMC,WCDnC,WAACb,GACd,OACE,sBACEc,MAAO,CACLC,QAAS,OACTC,eAAgB,UAHpB,UAME,qBACEF,MAAO,CACLG,eAAgBjB,EAAMkB,KAAKZ,SAAW,eAAiB,GACvDa,SAAU,IAEZR,QAASX,EAAMoB,aALjB,SAOGpB,EAAMkB,KAAKb,OAEd,wBAAQM,QAASX,EAAMqB,WAAvB,wBCfeC,E,4MACnBhC,MAAQ,CACNiC,SAAU,GAEVC,YAAa,MACbC,wBAAwB,G,EAG1BxB,cAAgB,SAACyB,GACf,EAAKhC,UAAS,SAACJ,GAAD,MAAY,CACxBiC,SAAS,CAAEG,GAAH,mBAAepC,EAAMiC,gB,EAIjCI,kBAAoB,SAACzB,GAEnB,EAAKR,UAAS,SAACJ,GAAD,MAAY,CAExBiC,SAAUjC,EAAMiC,SAASK,KAAI,SAACV,GAC5B,OAAIA,EAAKhB,KAAOA,EAEP,2BAEFgB,GAFL,IAIEZ,UAAWY,EAAKZ,WAIXY,U,EAOfG,WAAa,SAACnB,GACZ,EAAKR,UAAS,SAACJ,GAAD,MAAY,CACxBiC,SAAUjC,EAAMiC,SAASM,QAAO,SAACX,GAAD,OAAUA,EAAKhB,KAAOA,U,EAK1D4B,wBAA0B,WACxB,EAAKpC,UAAS,SAACJ,GAAD,MAAY,CACxBiC,SAAUjC,EAAMiC,SAASM,QAAO,SAACX,GAAD,OAAWA,EAAKZ,iB,EAKpDmB,uBAAyB,WACvB,EAAK/B,UAAS,SAACJ,GAAD,MAAY,CACxBiC,SAAUjC,EAAMiC,SAASK,KAAI,SAACV,GAAD,mBAAC,eACzBA,GADwB,IAE3BZ,SAAUhB,EAAMmC,4BAElBA,wBAAyBnC,EAAMmC,4B,EAKnCM,kBAAoB,SAACC,GACnB,EAAKtC,SAAS,CACZ8B,YAAaQ,K,EAKjBC,aAAe,SAACV,GACd,OAAOA,EAASK,KAAI,SAACV,GAAD,OAClB,cAACgB,EAAD,CAEEhB,KAAMA,EACNE,aAAc,kBAAM,EAAKO,kBAAkBT,EAAKhB,KAChDmB,WAAY,kBAAM,EAAKA,WAAWH,EAAKhB,MAHlCgB,EAAKhB,Q,EAQhBiC,oBAAsB,WAEpB,OAAO,EAAK7C,MAAMiC,SAASM,QAAO,SAACX,GAAD,OAAWA,EAAKZ,YAC/C8B,Q,EAGLC,mBAAqB,WAEnB,OAAO,EAAK/C,MAAMiC,SAASe,MAAK,SAACpB,GAAD,OAAUA,EAAKZ,a,4CAGjD,WAAU,IAAD,OACHiB,EAAW,GAWf,MAR+B,QAA3Bf,KAAKlB,MAAMkC,YACbD,EAAWf,KAAKlB,MAAMiC,SACc,aAA3Bf,KAAKlB,MAAMkC,YACpBD,EAAWf,KAAKlB,MAAMiC,SAASM,QAAO,SAACX,GAAD,OAAUA,EAAKZ,YACjB,WAA3BE,KAAKlB,MAAMkC,cACpBD,EAAWf,KAAKlB,MAAMiC,SAASM,QAAO,SAACX,GAAD,OAAWA,EAAKZ,aAItD,gCACE,cAAC,EAAD,CAAgBL,cAAeO,KAAKP,gBACnCO,KAAKyB,aAAaV,GACnB,4CACYf,KAAK2B,sBADjB,8BAIA,wBAAQxB,QAAS,kBAAM,EAAKoB,kBAAkB,QAA9C,4BAGA,wBAAQpB,QAAS,kBAAM,EAAKoB,kBAAkB,WAA9C,+BAGA,wBAAQpB,QAAS,kBAAM,EAAKoB,kBAAkB,aAA9C,kCAICvB,KAAK6B,qBACJ,8BACE,wBAAQ1B,QAAS,kBAAM,EAAKmB,2BAA5B,0CAIA,KACJ,8BACE,yBAAQnB,QAAS,kBAAM,EAAKc,0BAA5B,kDAEMjB,KAAKlB,MAAMmC,oC,GAlIWb,IAAMC,WCO7B0B,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.66028938.chunk.js","sourcesContent":["import React from 'react';\r\nimport shortId from 'shortid';\r\n\r\nexport default class CreateTaskForm extends React.Component {\r\n  state = {\r\n    taskText: '',\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    // Prevent page from refreshing\r\n    event.preventDefault();\r\n    // Create new task and add it to the todo-list\r\n    this.props.addTaskToList({\r\n      id: shortId.generate(),\r\n      text: this.state.taskText,\r\n      complete: false,\r\n    });\r\n\r\n    //Clear the text after adding task\r\n    this.setState({ taskText: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          name=\"taskText\"\r\n          placeholder=\"Please enter a task\"\r\n          value={this.state.taskText}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button onClick={this.handleSubmit}>Add task</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          textDecoration: props.task.complete ? 'line-through' : '',\r\n          fontSize: 24,\r\n        }}\r\n        onClick={props.completeTask}\r\n      >\r\n        {props.task.text}\r\n      </div>\r\n      <button onClick={props.removeTask}>‚ùå</button>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport CreateTaskForm from './CreateTaskForm';\r\nimport Task from './Task';\r\n\r\nexport default class TaskList extends React.Component {\r\n  state = {\r\n    taskList: [],\r\n    // The default is to show all of the tasks\r\n    filterParam: 'all',\r\n    setAllTasksAsCompleted: true,\r\n  };\r\n\r\n  addTaskToList = (newTask) => {\r\n    this.setState((state) => ({\r\n      taskList: [newTask, ...state.taskList],\r\n    }));\r\n  };\r\n\r\n  setTaskAsComplete = (id) => {\r\n    // Update the task-list\r\n    this.setState((state) => ({\r\n      // Iterate to find the task\r\n      taskList: state.taskList.map((task) => {\r\n        if (task.id === id) {\r\n          // We found the task we need to update\r\n          return {\r\n            // Keep all attributes the same\r\n            ...task,\r\n            // Except for the complete flag\r\n            complete: !task.complete,\r\n          };\r\n        } else {\r\n          // Keep it the same\r\n          return task;\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  // Delete task permanently\r\n  removeTask = (id) => {\r\n    this.setState((state) => ({\r\n      taskList: state.taskList.filter((task) => task.id !== id),\r\n    }));\r\n  };\r\n\r\n  // Delete all completed tasks from list\r\n  removeAllCompletedTasks = () => {\r\n    this.setState((state) => ({\r\n      taskList: state.taskList.filter((task) => !task.complete),\r\n    }));\r\n  };\r\n\r\n  // Set all tasks as completed\r\n  setAllTasksAsCompleted = () => {\r\n    this.setState((state) => ({\r\n      taskList: state.taskList.map((task) => ({\r\n        ...task,\r\n        complete: state.setAllTasksAsCompleted,\r\n      })),\r\n      setAllTasksAsCompleted: !state.setAllTasksAsCompleted,\r\n    }));\r\n  };\r\n\r\n  // Upadting the fliter paramter to show only specific types of tasks(complted, still active, or all of the tasks)\r\n  updateFilterParam = (filterValue) => {\r\n    this.setState({\r\n      filterParam: filterValue,\r\n    });\r\n  };\r\n\r\n  // Function to map and return a list of tasks as DOM elements\r\n  displayTasks = (taskList) => {\r\n    return taskList.map((task) => (\r\n      <Task\r\n        key={task.id}\r\n        task={task}\r\n        completeTask={() => this.setTaskAsComplete(task.id)}\r\n        removeTask={() => this.removeTask(task.id)}\r\n      />\r\n    ));\r\n  };\r\n\r\n  tasksLeftToComplete = () => {\r\n    // Return the length(amount) of tasks left to complete\r\n    return this.state.taskList.filter((task) => !task.complete)\r\n      .length;\r\n  };\r\n\r\n  completedTasksExit = () => {\r\n    // Check if at least there is one completed task\r\n    return this.state.taskList.some((task) => task.complete);\r\n  };\r\n\r\n  render() {\r\n    let taskList = [];\r\n\r\n    // Check if we need to fliter before rendering everything\r\n    if (this.state.filterParam === 'all') {\r\n      taskList = this.state.taskList;\r\n    } else if (this.state.filterParam === 'complete') {\r\n      taskList = this.state.taskList.filter((task) => task.complete);\r\n    } else if (this.state.filterParam === 'active') {\r\n      taskList = this.state.taskList.filter((task) => !task.complete);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <CreateTaskForm addTaskToList={this.addTaskToList} />\r\n        {this.displayTasks(taskList)}\r\n        <div>\r\n          You have {this.tasksLeftToComplete()} tasks left to\r\n          complete.\r\n        </div>\r\n        <button onClick={() => this.updateFilterParam('all')}>\r\n          Show all tasks\r\n        </button>\r\n        <button onClick={() => this.updateFilterParam('active')}>\r\n          Show active tasks\r\n        </button>\r\n        <button onClick={() => this.updateFilterParam('complete')}>\r\n          Show completed tasks\r\n        </button>\r\n        {/* If there are any completed tasks, show the \"delete completed tasks button\", else don't show it */}\r\n        {this.completedTasksExit() ? (\r\n          <div>\r\n            <button onClick={() => this.removeAllCompletedTasks()}>\r\n              Remove all completed tasks\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n        <div>\r\n          <button onClick={() => this.setAllTasksAsCompleted()}>\r\n            Set all tasks as completed:\r\n            {`${this.state.setAllTasksAsCompleted}`}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import './App.css';\nimport TaskList from './components/TaskList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}